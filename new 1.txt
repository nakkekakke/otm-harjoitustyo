using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Networking;

public class FrisbeeGolf : NetworkBehaviour {

    public enum States { Null, StartGame, StartHole, StartThrowRound, EndRound }
    [HideInInspector]
    public States state = States.Null;

    [HideInInspector]
    public ArrayList players = new ArrayList();
    [HideInInspector]
    public int turn = 0;
    [HideInInspector]
    public int currentTee = 0;

    [HideInInspector]
    public ArrayList holes = new ArrayList();

    private Player currentPlayer;


    void Update() {

        if (Input.GetKeyDown(KeyCode.Return)) {
            state = States.StartGame;
        }

        if (Input.GetKeyDown(KeyCode.Space)) {
            print("Pressed space");
            state = States.StartThrowRound;
        }

        //Update states
        CmdCheckStates();

    }

    [Command]
    private void CmdCheckStates() {
        if (state == States.Null) {
            return;
        } else if (state == States.StartGame) {
            CmdStartGame();
            state = States.Null;
            state = States.StartHole;
        } else if (state == States.StartHole) {
            CmdStartHole(currentTee);
            state = States.Null;
            
        } else if (state == States.StartThrowRound) {
            CmdStartThrowRound();
            state = States.Null;
        } else if (state == States.EndRound) {

            state = States.Null;
        }
    }

    //Game progression
    [Command]
    public void CmdStartGame() {

        print("--- Starting game...");

        turn = 0;
        currentTee = 0;

        //Remove
        CmdUpdateInformation();
        

    }

    [Command]
    public void CmdStartHole(int holeIndex) {
        
        print("--- Starting hole, index: " + holeIndex);

        RpcSetPlayerPositions(holeIndex);
        /*
        CmdStartThrowRound();

        if (RoundHasEnded()) {

            print("Round has ended.");

            return;
        }

        RpcResetThrowRound();
        
        */
       // StartCoroutine(StartHole(holeIndex));

    }

    [Command]
    public void CmdStartThrowRound() {
        /*
        while (turn < players.Count) {

            currentPlayer = players[turn] as Player;
            RpcSetPlayerState(true);
            StartCoroutine(StartPlayerTurn());
            
        }

        StartCoroutine(StartThrowRound(currentTee));


        */

        StartCoroutine(StartThrowRoundNew());

    }


    //Initialization
    [Command]
    public void CmdUpdateInformation() {
        print("--- Updating information");
        
        RpcRefreshPlayerList();
        RpcRefreshHolesList();
    }

    [ClientRpc]
    public void RpcRefreshPlayerList() {

        print("--- Updating player list...");

        RpcSetPlayerStates(true);

        players = new ArrayList();

        foreach (GameObject player in GameObject.FindGameObjectsWithTag("Player")) {
            player.GetComponent<Player>().RpcSetName("- Added player to list: Player " + players.Count);
            players.Add(player.GetComponent<Player>());
            player.SetActive(false);
        }

        print("Updated player list, player amount: " + players.Count);

    }
    [ClientRpc]
    public void RpcRefreshHolesList() {

        print("--- Updating holes list...");

        holes = new ArrayList();

        foreach (GameObject tee in GameObject.FindGameObjectsWithTag("Tee")) {

            holes.Add(tee.GetComponent<GolfTee>());

        }

        print("Updated holes list, hole amount: " + holes.Count);

    }


    //Game commands

    private IEnumerator StartThrowRoundOld(int holeIndex) {

        while (turn >= players.Count) {

            CmdStartTurn();

            if (currentPlayer == null) {
                print("CURRENT PLAYER IS NULL");
            }

            if (currentPlayer.finishedTurn) {
                print("Player finished turn, disabling player.");
                turn++;
            }

            yield return null;
        }

        if (RoundHasEnded()) {

            print("Round has ended.");

        } else {
            RpcResetThrowRound();
        }



    }

    private IEnumerator StartThrowRound(int holeIndex) {

        while (turn < players.Count) {

            RpcSetPlayerState(true);

            yield return null;
        }

    }

    private IEnumerator StartPlayerTurn() {

        //Wait for Player RPC method to complete
        while (true) {
            if (currentPlayer.gameObject.activeSelf) {
                break;
            }
            yield return null;
        }

        while (true) {

            if (currentPlayer.finishedTurn) {



                break;
            }


            yield return null;
        }

        turn++;
        
    }

    private IEnumerator StartThrowRoundNew() {

        foreach (Player player in players) {

            currentPlayer = player;
            RpcSetPlayerState(true);

            print("--- In throw loop");

            while (true) {
                print("Waiting for player to be active.");
                if (currentPlayer.gameObject.activeSelf) {
                    print("Player is active, breaking loop.");
                    break;
                }
                yield return null;
            }

            while (true) {

                print("--- In check state loop");

                if (currentPlayer.finishedTurn) {

                    print("Player finished, breaking loop");

                    break;
                }


                yield return null;
            }

            turn++;
            yield return null;
        }

        print("Finished method.");

    }



    public bool RoundHasEnded() {

        print("--- Checking round end status...");

        //Check player finishedHole

        return true;
    }

    //Player related methods
    [ClientRpc]
    public void RpcSetPlayerPositions(int holeIndex) {

        print("--- Setting player positions, hole index: " + holeIndex);

        GolfTee currentTee = GetTeeByIndex(holeIndex);

        RpcSetPlayerStates(true);
        foreach (Player player in players) {

            player.RpcSetPosition(currentTee.spawnPos, currentTee.spawnRot);

        }
        print("Set players positions, disabling all players...");
        RpcSetPlayerStates(false);

    }

    [ClientRpc]
    public void RpcSetPlayerStates(bool state) {

        foreach (Player player in players) {
            player.gameObject.SetActive(state);
        }

        print("Set player states to: " + state);

    }

    [ClientRpc]
    public void RpcSetPlayerState(bool state) {
        currentPlayer.gameObject.SetActive(state);
    }

    [Command]
    public void CmdStartTurn() {

        currentPlayer = players[turn] as Player;

        print("Starting player " + currentPlayer.name + " turn.");

        RpcSetPlayerState(true);

    }

    [ClientRpc]
    public void RpcResetThrowRound() {

        print("--- Resetting throw round.");

        foreach (Player player in players) {
            player.finishedTurn = false;
        }

        turn = 0;

    }

    //Other
    private GolfTee GetTeeByIndex(int holeIndex) {

        GolfTee tee = null;

        foreach (GolfTee teeToCheck in holes) {
            if (teeToCheck.indexNumber == holeIndex) {
                tee = teeToCheck;
            }


        }

        return tee;

    }

    private bool CheckClientReadyState() {

        return false;
    }

}


